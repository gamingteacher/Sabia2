import React from 'react'import React from 'react'import React from 'react'import React from 'react'import React from 'react'import React, { useEffect } from 'react'

import { Navigate, useLocation } from 'react-router-dom'

import { useAuthStore } from '../stores'import { Navigate, useLocation } from 'react-router-dom'



const ProtectedRoute = ({ import { useAuthStore } from '../stores'import { Navigate, useLocation } from 'react-router-dom'

  children, 

  requireAuth = true,

  requireRole = null, // 'administrador', 'equipe', 'membro'

  requireToolAccess = falseconst ProtectedRoute = ({ import { useAuthStore } from '../stores'import { Navigate, useLocation } from 'react-router-dom'

}) => {

  const location = useLocation()  children, 

  const { 

    isAuthenticated,   requireAuth = true,

    isAdmin, 

    isTeamMember,   requireRole = null,

    hasToolAccess, 

    teamData,  requireToolAccess = falseconst ProtectedRoute = ({ import { useAuthStore } from '../stores'import { Navigate, useLocation } from 'react-router-dom'import { Navigate } from 'react-router-dom'

    isLoading 

  } = useAuthStore()}) => {



  // Loading state  const location = useLocation()  children, 

  if (isLoading) {

    return (  const { 

      <div className="min-h-screen flex items-center justify-center bg-gray-50">

        <div className="text-center">    isAuthenticated,   requireAuth = true,

          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4"></div>

          <p className="text-gray-600">Carregando...</p>    isAdmin, 

        </div>

      </div>    isTeamMember,   requireRole = null,

    )

  }    hasToolAccess, 



  // Se n√£o requer autentica√ß√£o, renderizar children    teamData,  requireToolAccess = falseconst ProtectedRoute = ({ import { useAuthStore } from '../stores'import { useAuthStore } from '../stores'

  if (!requireAuth) {

    return children    isLoading 

  }

  } = useAuthStore()}) => {

  // Se n√£o est√° autenticado, redirecionar para login

  if (!isAuthenticated) {

    return <Navigate to="/login" state={{ from: location }} replace />

  }  // Loading state  const location = useLocation()  children, 



  // Se requer acesso ao painel de ferramentas  if (isLoading) {

  if (requireToolAccess && !hasToolAccess()) {

    return (    return (  const { 

      <div className="min-h-screen flex items-center justify-center p-4 bg-gray-50">

        <div className="text-center max-w-md">      <div className="min-h-screen flex items-center justify-center">

          <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-6 shadow-sm">

            <div className="text-yellow-600 text-5xl mb-4">‚è≥</div>        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>    isAuthenticated,   requireAuth = true,

            <h2 className="text-xl font-semibold text-gray-900 mb-2">

              Aguardando Aprova√ß√£o      </div>

            </h2>

            <p className="text-gray-600 mb-4">    )    isAdmin, 

              Sua conta est√° pendente de aprova√ß√£o pela equipe. 

              Voc√™ receber√° acesso ao painel assim que for aprovado.  }

            </p>

            <div className="text-sm text-gray-500">    isTeamMember,   requireRole = null, // 'administrador', 'equipe', 'membro'

              Status atual: <span className="font-medium text-yellow-600">

                {teamData?.papel || 'Pendente'}  // Se n√£o requer autentica√ß√£o, renderizar children

              </span>

            </div>  if (!requireAuth) {    hasToolAccess, 

          </div>

          <a    return children

            href="/"

            className="inline-block mt-4 text-primary hover:text-primary/80 transition-colors"  }    teamData,  requireToolAccess = falseconst ProtectedRoute = ({ const ProtectedRoute = ({ children, requireAdmin = false }) => {

          >

            ‚Üê Voltar ao site

          </a>

        </div>  // Se n√£o est√° autenticado, redirecionar para login    isLoading 

      </div>

    )  if (!isAuthenticated) {

  }

    return <Navigate to="/login" state={{ from: location }} replace />  } = useAuthStore()}) => {

  // Verificar papel espec√≠fico se necess√°rio

  if (requireRole) {  }

    const hasRequiredRole = () => {

      switch (requireRole) {

        case 'administrador':

          return isAdmin()  // Se requer acesso ao painel de ferramentas

        case 'equipe':

        case 'membro':  if (requireToolAccess && !hasToolAccess()) {  // Loading state  const location = useLocation()  children,   const { isAuthenticated, isUserAdmin, loading, user, isAdmin, forceAdminCheck } = useAuthStore()

          return isTeamMember()

        default:    return (

          return false

      }      <div className="min-h-screen flex items-center justify-center p-4">  if (isLoading) {

    }

        <div className="text-center max-w-md">

    if (!hasRequiredRole()) {

      return (          <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-6">    return (  const { 

        <div className="min-h-screen flex items-center justify-center p-4 bg-gray-50">

          <div className="text-center max-w-md">            <div className="text-yellow-600 text-5xl mb-4">‚è≥</div>

            <div className="bg-red-50 border border-red-200 rounded-lg p-6 shadow-sm">

              <div className="text-red-600 text-5xl mb-4">üö´</div>            <h2 className="text-xl font-semibold text-gray-900 mb-2">      <div className="min-h-screen flex items-center justify-center">

              <h2 className="text-xl font-semibold text-gray-900 mb-2">

                Acesso Restrito              Aguardando Aprova√ß√£o

              </h2>

              <p className="text-gray-600 mb-4">            </h2>        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>    isAuthenticated,   requireAuth = true,  

                Voc√™ n√£o tem permiss√£o para acessar esta √°rea. 

                Papel necess√°rio: <span className="font-medium">{requireRole}</span>            <p className="text-gray-600 mb-4">

              </p>

              <div className="text-sm text-gray-500">              Sua conta est√° pendente de aprova√ß√£o pela equipe.       </div>

                Seu papel atual: <span className="font-medium">

                  {teamData?.papel || 'N√£o definido'}              Voc√™ receber√° acesso ao painel assim que for aprovado.

                </span>

              </div>            </p>    )    isAdmin, 

            </div>

            <button            <div className="text-sm text-gray-500">

              onClick={() => window.history.back()}

              className="inline-block mt-4 px-4 py-2 bg-primary text-white rounded-lg hover:bg-primary/90 transition-colors"              Status atual: <span className="font-medium text-yellow-600">  }

            >

              ‚Üê Voltar                {teamData?.papel || 'Pendente'}

            </button>

          </div>              </span>    isTeamMember,   requireRole = null, // 'administrador', 'equipe', 'membro'  // Log para diagn√≥stico

        </div>

      )            </div>

    }

  }          </div>  // Se n√£o requer autentica√ß√£o, renderizar children



  // Se passou por todas as verifica√ß√µes, renderizar children          <a

  return children

}            href="/"  if (!requireAuth) {    hasToolAccess, 



export default ProtectedRoute            className="inline-block mt-4 text-primary hover:text-primary/80 transition-colors"

          >    return children

            ‚Üê Voltar ao site

          </a>  }    isPending,  requireToolAccess = false  console.log('ProtectedRoute - user:', user?.email);

        </div>

      </div>

    )

  }  // Se n√£o est√° autenticado, redirecionar para login    teamData,



  // Verificar papel espec√≠fico se necess√°rio  if (!isAuthenticated) {

  if (requireRole) {

    const hasRequiredRole = () => {    return <Navigate to="/login" state={{ from: location }} replace />    isLoading }) => {  console.log('ProtectedRoute - isAdmin:', isAdmin);

      switch (requireRole) {

        case 'administrador':  }

          return isAdmin()

        case 'equipe':  } = useAuthStore()

        case 'membro':

          return isTeamMember()  // Se requer acesso ao painel de ferramentas

        default:

          return false  if (requireToolAccess && !hasToolAccess()) {  const location = useLocation()  console.log('ProtectedRoute - requireAdmin:', requireAdmin);

      }

    }    return (



    if (!hasRequiredRole()) {      <div className="min-h-screen flex items-center justify-center p-4">  // Loading state

      return (

        <div className="min-h-screen flex items-center justify-center p-4">        <div className="text-center max-w-md">

          <div className="text-center max-w-md">

            <div className="bg-red-50 border border-red-200 rounded-lg p-6">          <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-6">  if (isLoading) {  const {   

              <div className="text-red-600 text-5xl mb-4">üö´</div>

              <h2 className="text-xl font-semibold text-gray-900 mb-2">            <div className="text-yellow-600 text-5xl mb-4">‚è≥</div>

                Acesso Restrito

              </h2>            <h2 className="text-xl font-semibold text-gray-900 mb-2">    return (

              <p className="text-gray-600 mb-4">

                Voc√™ n√£o tem permiss√£o para acessar esta √°rea.               Aguardando Aprova√ß√£o

                Papel necess√°rio: <span className="font-medium">{requireRole}</span>

              </p>            </h2>      <div className="min-h-screen flex items-center justify-center">    isAuthenticated,   // For√ßar verifica√ß√£o de admin ao montar o componente se for necess√°rio

              <div className="text-sm text-gray-500">

                Seu papel atual: <span className="font-medium">            <p className="text-gray-600 mb-4">

                  {teamData?.papel || 'N√£o definido'}

                </span>              Sua conta est√° pendente de aprova√ß√£o pela equipe.         <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>

              </div>

            </div>              Voc√™ receber√° acesso ao painel assim que for aprovado.

            <button

              onClick={() => window.history.back()}            </p>      </div>    isAdmin,   useEffect(() => {

              className="inline-block mt-4 text-primary hover:text-primary/80 transition-colors"

            >            <div className="text-sm text-gray-500">

              ‚Üê Voltar

            </button>              Status atual: <span className="font-medium text-yellow-600">    )

          </div>

        </div>                {teamData?.papel || 'Pendente'}

      )

    }              </span>  }    isTeamMember,     if (requireAdmin && user && !isAdmin) {

  }

            </div>

  // Se passou por todas as verifica√ß√µes, renderizar children

  return children          </div>

}

          <a

export default ProtectedRoute
            href="/"  // Se n√£o requer autentica√ß√£o, renderizar children    hasToolAccess,       console.log('ProtectedRoute - For√ßando verifica√ß√£o de admin para:', user.email);

            className="inline-block mt-4 text-primary hover:text-primary/80 transition-colors"

          >  if (!requireAuth) {

            ‚Üê Voltar ao site

          </a>    return children    isPending,      forceAdminCheck();

        </div>

      </div>  }

    )

  }    teamData,    }



  // Verificar papel espec√≠fico  // Se n√£o est√° autenticado, redirecionar para login

  if (requireRole) {

    const hasRequiredRole = () => {  if (!isAuthenticated) {    isLoading   }, [requireAdmin, user, isAdmin, forceAdminCheck]);

      switch (requireRole) {

        case 'administrador':    return <Navigate to="/login" state={{ from: location }} replace />

          return isAdmin()

        case 'equipe':  }  } = useAuthStore()

        case 'membro':

          return isTeamMember()

        default:

          return false  // Se requer acesso ao painel de ferramentas  // Mostrar loading enquanto verifica autentica√ß√£o

      }

    }  if (requireToolAccess && !hasToolAccess()) {



    if (!hasRequiredRole()) {    return (  // Loading state  if (loading) {

      return (

        <div className="min-h-screen flex items-center justify-center p-4">      <div className="min-h-screen flex items-center justify-center p-4">

          <div className="text-center max-w-md">

            <div className="bg-red-50 border border-red-200 rounded-lg p-6">        <div className="text-center max-w-md">  if (isLoading) {    return (

              <div className="text-red-600 text-5xl mb-4">üö´</div>

              <h2 className="text-xl font-semibold text-gray-900 mb-2">          <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-6">

                Acesso Restrito

              </h2>            <div className="text-yellow-600 text-5xl mb-4">‚è≥</div>    return (      <div className="min-h-screen bg-background flex items-center justify-center">

              <p className="text-gray-600 mb-4">

                Voc√™ n√£o tem permiss√£o para acessar esta √°rea.             <h2 className="text-xl font-semibold text-gray-900 mb-2">

                Papel necess√°rio: <span className="font-medium">{requireRole}</span>

              </p>              Aguardando Aprova√ß√£o      <div className="min-h-screen flex items-center justify-center">        <div className="text-center">

              <div className="text-sm text-gray-500">

                Seu papel atual: <span className="font-medium">            </h2>

                  {teamData?.papel || 'N√£o definido'}

                </span>            <p className="text-gray-600 mb-4">        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>          <div className="w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>

              </div>

            </div>              Sua conta est√° pendente de aprova√ß√£o pela equipe. 

            <button

              onClick={() => window.history.back()}              Voc√™ receber√° acesso ao painel assim que for aprovado.      </div>          <p className="text-gray-600">Carregando...</p>

              className="inline-block mt-4 text-primary hover:text-primary/80 transition-colors"

            >            </p>

              ‚Üê Voltar

            </button>            <div className="text-sm text-gray-500">    )        </div>

          </div>

        </div>              Status atual: <span className="font-medium text-yellow-600">

      )

    }                {teamData?.papel || 'Pendente'}  }      </div>

  }

              </span>

  // Se passou por todas as verifica√ß√µes, renderizar children

  return children            </div>    )

}

          </div>

export default ProtectedRoute
          <a  // Se n√£o requer autentica√ß√£o, renderizar children  }

            href="/"

            className="inline-block mt-4 text-primary hover:text-primary/80 transition-colors"  if (!requireAuth) {

          >

            ‚Üê Voltar ao site    return children  // Verificar se est√° autenticado - usar a propriedade diretamente

          </a>

        </div>  }  if (!user) {

      </div>

    )    console.log('ProtectedRoute - Usu√°rio n√£o autenticado, redirecionando para login');

  }

  // Se n√£o est√° autenticado, redirecionar para login    return <Navigate to="/login" replace />

  // Verificar papel espec√≠fico

  if (requireRole) {  if (!isAuthenticated) {  }

    const hasRequiredRole = () => {

      switch (requireRole) {    return <Navigate to="/login" state={{ from: location }} replace />

        case 'administrador':

          return isAdmin()  }  // Verificar se precisa ser admin - usar a propriedade diretamente

        case 'equipe':

        case 'membro':  if (requireAdmin && !isAdmin) {

          return isTeamMember()

        default:  // Se requer acesso ao painel de ferramentas    console.log('ProtectedRoute - Usu√°rio n√£o √© admin, exibindo mensagem de acesso negado');

          return false

      }  if (requireToolAccess && !hasToolAccess()) {    

    }

    return (    // Mostrar mensagem de acesso negado em vez de redirecionar

    if (!hasRequiredRole()) {

      return (      <div className="min-h-screen flex items-center justify-center p-4">    return (

        <div className="min-h-screen flex items-center justify-center p-4">

          <div className="text-center max-w-md">        <div className="text-center max-w-md">      <div className="min-h-screen bg-background flex items-center justify-center p-4">

            <div className="bg-red-50 border border-red-200 rounded-lg p-6">

              <div className="text-red-600 text-5xl mb-4">üö´</div>          <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-6">        <div className="bg-white rounded-lg shadow-md p-6 max-w-md w-full">

              <h2 className="text-xl font-semibold text-gray-900 mb-2">

                Acesso Restrito            <div className="text-yellow-600 text-5xl mb-4">‚è≥</div>          <div className="w-16 h-16 mx-auto mb-4 flex items-center justify-center bg-red-100 rounded-full">

              </h2>

              <p className="text-gray-600 mb-4">            <h2 className="text-xl font-semibold text-gray-900 mb-2">            <svg className="w-8 h-8 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">

                Voc√™ n√£o tem permiss√£o para acessar esta √°rea. 

                Papel necess√°rio: <span className="font-medium">{requireRole}</span>              Aguardando Aprova√ß√£o              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />

              </p>

              <div className="text-sm text-gray-500">            </h2>            </svg>

                Seu papel atual: <span className="font-medium">

                  {teamData?.papel || 'N√£o definido'}            <p className="text-gray-600 mb-4">          </div>

                </span>

              </div>              Sua conta est√° pendente de aprova√ß√£o pela equipe.           

            </div>

            <button              Voc√™ receber√° acesso ao painel assim que for aprovado.          <h2 className="text-2xl font-bold text-center text-gray-800 mb-4">Acesso Restrito</h2>

              onClick={() => window.history.back()}

              className="inline-block mt-4 text-primary hover:text-primary/80 transition-colors"            </p>          

            >

              ‚Üê Voltar            <div className="text-sm text-gray-500">          <div className="space-y-4">

            </button>

          </div>              Status atual: <span className="font-medium text-yellow-600">            <p className="text-gray-600 text-center">

        </div>

      )                {teamData?.papel || 'Pendente'}              Voc√™ est√° autenticado como <strong className="text-primary">{user.email}</strong>, mas n√£o tem permiss√µes de administrador para acessar esta p√°gina.

    }

  }              </span>            </p>



  // Se passou por todas as verifica√ß√µes, renderizar children            </div>            

  return children

}          </div>            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 text-sm text-blue-700">



export default ProtectedRoute          <a              <p className="font-semibold mb-1">Informa√ß√µes de Diagn√≥stico:</p>

            href="/"              <ul className="list-disc pl-5 space-y-1">

            className="inline-block mt-4 text-primary hover:text-primary/80 transition-colors"                <li>Email autenticado: {user.email}</li>

          >                <li>Status admin: {isAdmin ? 'Sim' : 'N√£o'}</li>

            ‚Üê Voltar ao site                <li>Necess√°rio: {requireAdmin ? 'Sim' : 'N√£o'}</li>

          </a>              </ul>

        </div>              <p className="mt-2 italic">

      </div>                Utilize o bot√£o de debug no canto inferior direito da tela para corrigir seu acesso.

    )              </p>

  }            </div>

            

  // Verificar papel espec√≠fico            <div className="flex justify-center">

  if (requireRole) {              <button 

    const hasRequiredRole = () => {                onClick={() => window.location.href = '/'}

      switch (requireRole) {                className="px-4 py-2 bg-primary text-white rounded-lg hover:bg-primary/90 transition-colors"

        case 'administrador':              >

          return isAdmin()                Voltar para Home

        case 'equipe':              </button>

        case 'membro':            </div>

          return isTeamMember()          </div>

        default:        </div>

          return false      </div>

      }    );

    }  }



    if (!hasRequiredRole()) {  return children

      return (}

        <div className="min-h-screen flex items-center justify-center p-4">

          <div className="text-center max-w-md">export default ProtectedRoute
            <div className="bg-red-50 border border-red-200 rounded-lg p-6">
              <div className="text-red-600 text-5xl mb-4">üö´</div>
              <h2 className="text-xl font-semibold text-gray-900 mb-2">
                Acesso Restrito
              </h2>
              <p className="text-gray-600 mb-4">
                Voc√™ n√£o tem permiss√£o para acessar esta √°rea. 
                Papel necess√°rio: <span className="font-medium">{requireRole}</span>
              </p>
              <div className="text-sm text-gray-500">
                Seu papel atual: <span className="font-medium">
                  {teamData?.papel || 'N√£o definido'}
                </span>
              </div>
            </div>
            <button
              onClick={() => window.history.back()}
              className="inline-block mt-4 text-primary hover:text-primary/80 transition-colors"
            >
              ‚Üê Voltar
            </button>
          </div>
        </div>
      )
    }
  }

  // Se passou por todas as verifica√ß√µes, renderizar children
  return children
}

export default ProtectedRoute